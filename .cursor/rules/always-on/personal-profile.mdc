---
description: 
globs: 
alwaysApply: true
---
# Cursor AI Developer Profile Rules

This document outlines the developer's experience, preferences, and context to help provide more tailored and relevant assistance for Polarity integration development.

## Developer Information

### Basic Details
- **Name:** TODO
- **Years of experience in software development:** TODO
- **Company joining date:** TODO
- **Current role:** TODO
- **Primary development focus:** TODO (e.g., Security integrations, Threat intelligence, Data enrichment)

### Development Environment
- **Primary IDE:** TODO
- **Operating System:** TODO
- **Shell:** TODO
- **Package Manager preference:** TODO (npm, yarn, pnpm, etc.)
- **Version Control:** TODO (Git workflow preferences)

## Technical Experience

### Programming Languages
- **JavaScript/Node.js:** TODO (Beginner/Intermediate/Advanced/Expert)
- **TypeScript:** TODO (Beginner/Intermediate/Advanced/Expert)
- **Python:** TODO (Beginner/Intermediate/Advanced/Expert)
- **Other languages:** TODO

### Web Technologies
- **HTML/CSS:** TODO (Beginner/Intermediate/Advanced/Expert)
- **Handlebars templating:** TODO (Beginner/Intermediate/Advanced/Expert)
- **LESS/CSS preprocessing:** TODO (Beginner/Intermediate/Advanced/Expert)
- **REST APIs:** TODO (Beginner/Intermediate/Advanced/Expert)
- **GraphQL:** TODO (Beginner/Intermediate/Advanced/Expert)

### Polarity Integration Framework
- **Polarity integration development:** TODO (Beginner/Intermediate/Advanced/Expert)
- **Entity type handling:** TODO (IPv4, domain, hash, email, URL)
- **Integration configuration:** TODO (config.json, user options)
- **Template development:** TODO (Handlebars, components)
- **Testing integrations:** TODO (test-runner.js, unit tests)

### Security & Threat Intelligence
- **Cybersecurity concepts:** TODO (Beginner/Intermediate/Advanced/Expert)
- **Threat intelligence platforms:** TODO (OpenCTI, MISP, etc.)
- **Security APIs:** TODO (VirusTotal, AlienVault, etc.)
- **Data enrichment workflows:** TODO (Beginner/Intermediate/Advanced/Expert)

### DevOps & Infrastructure
- **Docker:** TODO (Beginner/Intermediate/Advanced/Expert)
- **Git workflows:** TODO (Beginner/Intermediate/Advanced/Expert)
- **CI/CD:** TODO (Beginner/Intermediate/Advanced/Expert)
- **Linux administration:** TODO (Beginner/Intermediate/Advanced/Expert)

## Engineering Practices

### Development Workflow
- **Agile/Scrum:** TODO (Beginner/Intermediate/Advanced/Expert)
- **Test-driven development:** TODO (Beginner/Intermediate/Advanced/Expert)
- **Code review practices:** TODO (Beginner/Intermediate/Advanced/Expert)
- **Documentation standards:** TODO (Beginner/Intermediate/Advanced/Expert)

### Code Quality
- **Linting and formatting:** TODO (ESLint, Prettier, etc.)
- **Code organization:** TODO (File structure, naming conventions)
- **Error handling:** TODO (Beginner/Intermediate/Advanced/Expert)
- **Performance optimization:** TODO (Beginner/Intermediate/Advanced/Expert)

### Security Practices
- **Secure coding principles:** TODO (OWASP, input validation, etc.)
- **API security:** TODO (Authentication, rate limiting, etc.)
- **Data protection:** TODO (PII handling, encryption, etc.)
- **Vulnerability assessment:** TODO (Beginner/Intermediate/Advanced/Expert)

## Project Context

### Current Focus Areas
- **Primary integration type:** TODO (e.g., Threat intelligence, Data enrichment, Workflow automation)
- **Target entity types:** TODO (IPv4, domain, hash, email, URL, etc.)
- **External APIs:** TODO (List of APIs being integrated)
- **Development priorities:** TODO (Performance, security, user experience, etc.)

### Common Challenges
- **Frequently encountered issues:** TODO (API rate limiting, data validation, etc.)
- **Areas needing improvement:** TODO (Testing, documentation, etc.)
- **Learning goals:** TODO (Specific skills or technologies to develop)

### Team Collaboration
- **Team size:** TODO
- **Code review process:** TODO
- **Knowledge sharing:** TODO (Documentation, pair programming, etc.)
- **Communication preferences:** TODO (Slack, email, meetings, etc.)

## Preferences & Communication Style

### Technical Communication
- **Preferred explanation level:** TODO (High-level overview, Detailed technical, Step-by-step)
- **Code example preferences:** TODO (Minimal examples, Comprehensive examples, Both)
- **Documentation style:** TODO (Concise, Detailed, Visual aids)

### Problem-Solving Approach
- **Debugging style:** TODO (Systematic, Trial-and-error, Research-heavy)
- **Learning preferences:** TODO (Hands-on, Documentation, Video tutorials)
- **Time constraints:** TODO (Quick solutions needed, Can spend time on thorough solutions)

### Feedback & Iteration
- **Code review feedback:** TODO (Direct and honest, Gentle suggestions, Both)
- **Iteration preferences:** TODO (Multiple small iterations, Fewer larger iterations)
- **Error handling:** TODO (Fail fast, Graceful degradation, Comprehensive error messages)

## Context-Specific Information

### Polarity Integration Development
- **Integration deployment experience:** TODO (Local development, Production deployment)
- **Docker container management:** TODO (Beginner/Intermediate/Advanced/Expert)
- **Integration testing experience:** TODO (Unit tests, Integration tests, Manual testing)
- **Performance optimization:** TODO (Response time, Memory usage, API efficiency)

### Security Integration Focus
- **Threat intelligence platforms:** TODO (Experience with specific platforms)
- **Security data formats:** TODO (STIX, TAXII, JSON, etc.)
- **Compliance requirements:** TODO (GDPR, SOX, etc.)
- **Data classification:** TODO (Public, Internal, Confidential, etc.)

**REMEMBER: These are my experience levels and preferences. Take them into account when providing assistance, code examples, and explanations. Adjust the complexity and detail level based on my stated experience in each area.**
